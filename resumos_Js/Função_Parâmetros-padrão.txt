
**Entendendo Parâmetros Padrão em Funções JavaScript**

 O objetivo dessas técnicas é garantir que, mesmo que um argumento não seja fornecido ao chamar a função, ele ainda tenha um valor para que a lógica interna da função possa operar corretamente.


1. Abordagem Clássica: O Operador || (OU Lógico)

--*Linguagem Técnica*: Esta é a forma mais antiga e idiomática de definir valores padrão em JavaScript, antes do ES6. Ela utiliza o operador OR lógico (||) para atribuir um valor. Se o operando da esquerda for avaliado como falsy (ou seja, false, 0, "" (string vazia), null, undefined, NaN), o operando da direita será usado. Caso contrário, o valor original do operando da esquerda é mantido.

--*Linguagem Simples*: Pense nisso como "se o valor de a não for algo 'útil' (tipo vazio ou zero), então use 1". É uma solução rápida e comum, mas tem uma "armadilha": se você quiser passar um 0 (zero) como valor válido, ele será interpretado como "não útil" e substituído por 1.


2. Abordagem Intermediária: Testes Explícitos (!== undefined, in arguments, isNaN)

Linguagem Técnica: Esta abordagem é mais granular e tenta resolver as "armadilhas" do operador ||.

-- *a = a !== undefined ? a : 1;*: Usa o operador ternário. É mais preciso para checar se o valor realmente não foi fornecido (undefined). Se você passar 0, null, false, eles serão considerados valores válidos.

-- *b = b in arguments ? b : 1;*: O arguments é um objeto semelhante a um array (mas não é um array de verdade!) que contém todos os argumentos passados para a função. b in arguments verifica se a propriedade b existe nesse objeto, ou seja, se um valor foi explicitamente passado para b. Isso permite até mesmo passar undefined como um valor intencional.

-- *c = isNaN(c) ? 1 : c;*: Esta linha verifica especificamente se c é NaN (Not-a-Number), o que é útil se a expectativa é sempre receber um número. Se c for NaN, usa 1. Caso contrário, usa o valor de c.


3. Abordagem Moderna (ES6): Parâmetros Padrão

-- *Linguagem Técnica*: Introduzida no ECMAScript 2015 (ES6), esta é a forma preferida e mais limpa de definir parâmetros padrão. O valor padrão é atribuído ao parâmetro apenas se o argumento for undefined. Isso significa que null, 0, false são tratados como valores válidos quando passados explicitamente.

-- *Linguagem Simples*: É o jeito mais direto e fácil de ler: "Se ninguém me der um valor para a, eu uso 1. O mesmo para b e c." Ele só usa o valor padrão se o espaço estiver realmente em branco (undefined). Se você colocar um 0 ou null lá, ele entende que você quis que fosse 0 ou null.